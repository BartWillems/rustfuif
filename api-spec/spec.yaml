swagger: "3.0"
info:
  description: "Rustfuif API Spec"
  version: "0.1.0"
  title: "Rustfuif"
basePath: "/api"
tags:
  - name: "games"
    description: "Beursfuif games"
  - name: "auth"
    description: "Operations about user"
  - name: "invitations"
    description: "Invitations to games"
  - name: "sales"
    description: "items purchased in a game"
schemes:
  - "https"
  - "http"
paths:
  /register:
    post:
      tags:
        - "auth"
      operationId: "register"
      parameters:
        - in: "body"
          name: "credentials"
          required: true
          schema:
            $ref: "#/definitions/UserCredentials"
      responses:
        201:
          description: "successful registration"
        400:
          description: "password too long (maximum is 2^32 - 1)"
  /login:
    post:
      tags:
        - "auth"
      operationId: "login"
      parameters:
        - in: "body"
          name: "credentials"
          required: true
          schema:
            $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: "successfully authenticated"
        401:
          description: "incorrect credentials"
  /logout:
    post:
      tags:
        - "auth"
      operationId: "logout"
      security:
        - cookieAuth: []
      responses:
        200:
          description: "successfully logged out"
        401:
          description: "user has no session/is already logged out"
  /games:
    get:
      tags:
        - "games"
      summary: "Finds games"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "filterByGames"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "filter on games by their name, case insensitive"
          required: false
          type: "string"
        - name: "hide_completed"
          in: "query"
          description: "hide games that have been completed"
          type: "boolean"
          default: true
        - name: "owner_id"
          in: "query"
          type: "integer"
          description: "show all games from a specific user"
      responses:
        200:
          description: "successfully fetched games"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Game"
    post:
      tags:
        - "games"
      summary: "create a game"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "game info"
          required: true
          schema:
            $ref: "#/definitions/CreateGame"
      security:
        - cookieAuth: []
      responses:
        201:
          description: "sucessfully created game"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Game"
        400:
          description: "invalid game duration/start time"
        401:
          description: "user is not logged in"
  /games/{gameID}:
    get:
      tags:
        - "games"
      summary: "Find game by ID"
      description: "Returns a single game"
      operationId: "getGameByID"
      produces:
        - "application/json"
      parameters:
        - name: "gameID"
          in: "path"
          description: "ID of game to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "found game by ID"
          schema:
            $ref: "#/definitions/Game"
        404:
          description: "Game not found"

  /games/{gameID}/users:
    get:
      tags:
        - "games"
        - "invitations"
      description: "all players who are invited for a game"
      produces:
        - "application/json"
      security:
        - cookieAuth: []
      parameters:
        - name: "gameID"
          in: "path"
          description: "ID of game to return"
          required: true
          type: "integer"
          format: "int64"
        - name: "invitationState"
          in: "query"
          required: false
          type: "string"
          enum:
            - ACCEPTED
            - PENDING
            - DECLINED
      responses:
        200:
          description: "all players who are invited for a game"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Invitation"
        401:
          description: "only the game owner can see this list"

  /games/{gameID}/invitations:
    post:
      tags:
        - "games"
        - "invitations"
      description: "Invite a user to a game"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      security:
        - cookieAuth: []
      parameters:
        - in: "body"
          name: "userInvite"
          required: true
          schema:
            $ref: "#/definitions/UserInvite"
        - name: "gameID"
          in: "path"
          description: "ID of game to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        201:
          description: "invite created"
        401:
          description: "user is not logged in"
        403:
          description: "only the game owner can invite players"

  /games/{gameID}/sales:
    get:
      tags:
        - "games"
        - "sales"
      description: "all sales made in a game"
      produces:
        - "application/json"
      parameters:
        - name: "gameID"
          in: "path"
          description: "ID of game to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "all sales made in a game"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        404:
          description: "game not found"
    post:
      tags:
        - "games"
        - "sales"
      description: "create a new sale"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      security:
        - cookieAuth: []
      parameters:
        - name: "gameID"
          in: "path"
          description: "ID of your current game"
          required: true
          type: "integer"
          format: "int64"
        - name: "sale"
          in: "body"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SalesOrder"
      responses:
        201:
          description: "sucessfuly created transaction"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Transaction"
        401:
          description: "user is not logged in"
        403:
          description: "user is not in game"

  /invitations:
    get:
      tags:
        - invitations
      description: "fetch invitations for games you're invited to"
      produces:
        - "application/json"
      security:
        - cookieAuth: []
      responses:
        200:
          description: "list of games you're invited to"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Invitation"
        401:
          description: "user is not logged in"

securityDefinitions:
  cookieAuth:
    type: apiKey
    description: "this cookie is received on login"
    in: cookie
    name: actix-session

definitions:
  UserCredentials:
    type: "object"
    required:
      - "username"
      - "password"
    properties:
      username:
        type: "string"
        example: "admin"
      password:
        type: "string"
        example: "hunter2"

  Game:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "jk-drink-off"
      owner_id:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
        format: "date-time"
      close_time:
        type: "string"
        format: "date-time"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"

  CreateGame:
    type: "object"
    required:
      - "name"
      - "start_time"
      - "close_time"
    properties:
      name:
        type: "string"
        example: "jk-drink-off"
      start_time:
        type: "string"
        format: "date-time"
        example: "2020-3-9T19:45:59Z"
      close_time:
        type: "string"
        format: "date-time"
        example: "2020-3-10T19:45:59Z"

  Invitation:
    type: "object"
    properties:
      game_id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      state:
        type: "string"
        $ref: "#/definitions/InvitationState"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"

  InvitationState:
    type: "string"
    enum:
      - ACCEPTED
      - PENDING
      - DECLINED

  UserInvite:
    type: "object"
    required:
      - "user_id"
    properties:
      user_id:
        type: "integer"
        format: "int64"

  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      game_id:
        type: "integer"
        format: "int64"
      slot_no:
        type: "integer"
        format: "int16"
      created_at:
        type: "string"
        format: "date-time"

  SalesOrder:
    type: "object"
    required:
      - "number"
      - "amount"
    properties:
      slot_number:
        type: "integer"
        format: "int16"
        example: 0
        minimum: 0
        maximum: 7
        description: the slot number that matches the beverage
      amount:
        type: "integer"
        format: "int64"
        example: 1
        description: the amount of beverages that have been bought for this slot

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
